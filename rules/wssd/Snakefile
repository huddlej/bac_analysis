SPECIES_NAME = config["common_species_name"]
WSSD_THRESHOLD_5KB = config["wssd_threshold_5kb"]
WSSD_THRESHOLD_1KB = WSSD_THRESHOLD_5KB / 5

with open(config["clone_ids"], "r") as clone_ids_fh:
    ACCESSIONS = [line.rstrip() for line in clone_ids_fh]

TOTAL_ACCESSIONS = len(ACCESSIONS)

rule parasight_graph:
    input: "wins/5-1_norpt_iden.tab"
    output: "graph1.tab"
    params: sge_opts=""
    shell: "graph_maker.pl {input} {output} 5000 5 0"

rule parasight_sequences:
    input: "bac.out"
    output: "showseq.out"
    params: sge_opts=""
    shell: """echo -e "seqname\\tlength" > {output}; sort {input} >> {output}"""

rule parasight_alignment:
    input: "wins/5-1_norpt_iden.tab", "bac.out"
    output: "species.align"
    params: sge_opts=""
    shell: "perl ~ginger2/bin/align_maker.pl {input} {output}"

rule wssd_for_all_accessions:
    input: config["clone_ids"], "wssd_bases_by_accession.tab"
    output: "wssd_for_all_accessions.tab"
    params: sge_opts=""
    shell: """join -j 1 -a 1 -e 0 -o 1.1 2.2 -t"	" {input} | cut -f 2 | awk 'OFS="\\t" {{ if (NR == 1) {{ print "wssd" }} print }}' > {output}"""

rule wssd_bases_by_accession:
    input: "wins/wssdGE10K_nogap.tab"
    output: "wssd_bases_by_accession.tab"
    params: sge_opts=""
    shell: """sed '/_rc/d' {input} | awk 'OFS="\\t" {{ print $1,$3-$2 }}' | groupBy -i stdin -g 1 -c 2 -o sum > {output}"""

rule remove_gaps_from_wssd:
    input: wssd="wins/wssdGE10K.tab", gaps="gaps.tab"
    output: "wins/wssdGE10K_nogap.tab"
    params: sge_opts=""
    shell: "twoPartOvp_mgsrt.pl -i {input.wssd} -f -j {input.gaps} -t -L -o {output}"

rule filter_wssd_by_size:
    input: "wins/wssd.merged"
    output: "wins/wssdGE10K.tab"
    params: sge_opts=""
    shell: "awk '$3 - $2 >= 10000' {input} > {output}"

rule merge_wssd_windows:
    input: "wins/wssd.tab"
    output: "wins/wssd.merged"
    params: sge_opts=""
    shell: "coordsMerger_sort.pl -i {input} -h -u -n 0 -b 1 -e 2 -o {output}"

rule pick_wssd_windows:
    input: threshold_5kb="wins/5-1_norpt_iden.tab", threshold_1kb="wins/1-1_norpt_iden.tab"
    output: "wins/wssd.tab"
    params: sge_opts=""
    shell: "wssd_picker.pl -f {input.threshold_5kb} -w 7 -s 6 -c {WSSD_THRESHOLD_5KB} -b 3 -k {input.threshold_1kb} -n 5 -i 1 -t {WSSD_THRESHOLD_1KB} -o {output}"

rule get_all_aligned_reads_from_wssd:
    input: "wins/rd.out"
    output: "wins/wssd_reads.bed"
    params: sge_opts=""
    shell: """awk 'OFS="\\t" {{ print $1,$2,$3,$6,sprintf("%i", $4 * 1000),$7 }}' {input} | sort -k 1,1 -k 2,2n > {output}"""

rule calculate_identity_in_nonsliding_windows:
    input: windows="wins/wssd_depth_windows.bed", reads="wins/rd.out"
    output: "wins/wssd_identity_in_windows.bedGraph"
    params: sge_opts=""
    shell: "bedtools intersect -a {input.windows} -b {input.reads} -wo | groupBy -i stdin -g 1,2,3 -c 7 -o mean > {output}"

rule calculate_depth_in_nonsliding_windows:
    input: windows="wins/wssd_depth_windows.bed", reads="wins/rd.out"
    output: "wins/wssd_depth_in_windows.bedGraph"
    params: sge_opts=""
    shell: "bedtools intersect -a {input.windows} -b {input.reads} -c > {output}"

rule create_nonsliding_windows:
    input: "bac.out"
    output: "wins/wssd_depth_windows.bed"
    params: sge_opts=""
    shell: "bedtools makewindows -g {input} -w 1000 > {output}"

rule calculate_depth_stats:
    input: "wins/5-1_norpt_iden.tab"
    output: "wins/depth_stats.txt"
    params: sge_opts=""
    shell: """cut -f 4 {input} | grep -P "^\d+$" | statStd.pl > {output}"""

rule calculate_depth_in_1kb_windows:
    input: depth="wins/rd.out", sizes="bac.out", nonrepeats="norptgap.tab"
    output: "wins/1-1_norpt_iden.tab"
    params: sge_opts=""
    shell: "windowTracks_ovp.pl -w 1 -s 1 -a {input.sizes} -i {input.nonrepeats} -f -k {input.depth} -t -e -y 3 -g 4 -o {output} > /dev/null"

rule calculate_depth_in_5kb_windows:
    input: depth="wins/rd.out", sizes="bac.out", nonrepeats="norptgap.tab"
    output: "wins/5-1_norpt_iden.tab"
    params: sge_opts=""
    shell: "windowTracks_ovp.pl -w 5 -s 1 -a {input.sizes} -i {input.nonrepeats} -f -k {input.depth} -t -e -y 3 -g 4 -o {output} > /dev/null"

rule calculate_read_depth:
    input: "norptgap.tab", expand("post_mega/{accession}.bo.bo", accession=ACCESSIONS)
    output: "wins/rd.out"
    params: sge_opts=""
    run:
        if config.get("wssd_database_type") == "protein":
            shell("mkdir -p $(dirname {output}); mega_wincln_qual_parser.pl -b %s -d `dirname {input[1]}` -s .bo.bo -c -i 94 -e -a 300 -r {input[0]} -m 200 -h 200 -p 0.4 -o {output} -q -t > /dev/null;" % config.get("wssd_database"))
        else:
            shell("mkdir -p $(dirname {output}); mega_wincln_qual_parser.pl -d {input[0]} -s .bo.bo -c -i 94 -e -a 300 -r {input[1]} -m 200 -h 200 -p 0.4 -o {output} -q -t > /dev/null;")

def _get_quality_decoder_program(wildcards):
    if config.get("wssd_database_type") == "protein":
        return "/net/eichler/vol2/local/inhousebin/aa2qual"
    else:
        return "/net/eichler/vol2/local/inhousebin/c_code/convert/base2qual_compact_acgt"

rule post_blast:
    input: "mega64_out/{accession}.bo"
    output: "post_mega/{accession}.bo.bo"
    params: quality_decoder_program=_get_quality_decoder_program
    shell: """perl /net/eichler/vol7/home/ginger/bin/blast_window_cleaner1.pl -in {input} -binsize 500 -maxreads 20 -o STDOUT | perl /net/eichler/vol7/home/ginger/bin/newQ_NFS_blast_quality_rescorer353a_gg.pl -in STDIN -minquality 30 -alignments 12:13 -qual2db %s.qual -qdecode_program {params.quality_decoder_program} -inputtype megablastD3 -pattern2 "lcl\|(\S+)" -pattern1 "([A-Z0-9]+\.\d+)" -noalignments -globalfast -out {output}""" % config["wssd_database"]

rule blast:
    input: "mask/{accession}.all_masked.fasta"
    output: "mega64_out/{accession}.bo"
    params: threads=config.get("threads", 1)
    shell: """~jlhudd/src/ncbi-blast-2.4.0+/bin/blastn -num_threads {params.threads} -task megablast -db %s -query {input} -out {output} -min_raw_gapped_score 220 -perc_identity 93 -lcase_masking -soft_masking true -xdrop_ungap 10 -xdrop_gap 50 -penalty -3 -outfmt "7 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qseq sseq" -num_alignments 1000000""" % config["wssd_database"]
