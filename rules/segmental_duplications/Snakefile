include: "rules/liftover/Snakefile"

rule combine_summary_tables:
    input: expand("segmental_duplications_for_all_accessions.{type}.tab", type=("intra", "inter"))
    output: "segmental_duplications_for_all_accessions.tab"
    params: sge_opts=""
    shell: """paste {input} | awk 'OFS="\\t" {{ if (NR == 1) {{ print $0,"wgac_all" }} else {{ print $0,$1 + $2 }} }}' > {output}"""

rule annotate_segmental_duplications_for_all_clones:
    input: config["clone_ids"], "segmental_duplications_per_clone.{type}.tab"
    output: "segmental_duplications_for_all_accessions.{type}.tab"
    params: sge_opts=""
    shell: """join -j 1 -a 1 -e 0 -o 1.1 2.2 -t"	" {input} | cut -f 2 | awk 'OFS="\\t" {{ if (NR == 1) {{ print "wgac_{wildcards.type}" }} print }}' > {output}"""

rule segmental_duplications_per_clone_by_type:
    input: "segmental_duplications_in_bacs.bed"
    output: "segmental_duplications_per_clone.{type}.tab"
    params: sge_opts=""
    shell: """grep {wildcards.type} {input} | awk 'OFS="\\t" {{ print $1,$3-$2 }}' | groupBy -i stdin -g 1 -c 2 -o sum > {output}"""

# Lift over WGAC from reference to BACs.
rule liftover_segmental_duplications:
    input: "segmental_duplications.bed", "liftover.chain"
    output: "segmental_duplications_in_bacs.bed", "segmental_duplications_unmapped_to_bacs.txt"
    params: sge_opts=""
    shell: "liftOver -minMatch=0.75 {input} {output}; sort -k 1,1 -k 2,2n -o {output[0]} {output[0]}"

rule summarize_segmental_duplications:
    input: config["segmental_duplications"]
    output: "segmental_duplications.bed"
    params: sge_opts=""
    shell: """awk 'OFS="\\t" {{ if($1 == $7) {{ type="intra" }} else {{ type="inter" }} if ($6 == "_") {{ strand="-" }} else {{ strand="+" }}; if ($26 > 0.99) {{ color="255,140,0" }} else if ($26 > 0.98 && $26 <= 0.99) {{ color="255,255,0" }} else {{ color="105,105,105" }} score=sprintf("%i", $26 * 1000); print $1,$2,$3,$7":"$8"-"$9"_"type,score,strand,$2,$3,color }}' {input} | sort -k 1,1 -k 2,2n > {output}"""
