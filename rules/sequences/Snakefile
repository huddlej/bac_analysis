import os

SPECIES = config["full_species_name"]

if "clone_paths" in config:
    with open(config["clone_paths"], "r") as clone_ids_fh:
        CLONE_PATHS_BY_ID = dict([line.rstrip().split("\t") for line in clone_ids_fh])
        ACCESSIONS = CLONE_PATHS_BY_ID.keys()
else:
    with open(config["clone_ids"], "r") as clone_ids_fh:
        ACCESSIONS = [line.rstrip() for line in clone_ids_fh]

TRF_PARAMS = config["trf_params"]
TRF_PARAMS_OUTPUT = ".".join(TRF_PARAMS.split(" "))

rule get_2bit_info:
    input: "clones.2bit"
    output: "clones.chromInfo"
    params: sge_opts=""
    shell: "twoBitInfo {input} {output}"

rule create_fasta_for_clones:
    input: "clones.2bit"
    output: "clones.fasta"
    params: sge_opts=""
    shell: "twoBitToFa {input} {output}"

rule create_2bit_for_clones:
    input: "all_masked"
    output: "clones.2bit"
    params: sge_opts=""
    shell: "faToTwoBit {input}/* {output}"

rule find_non_repeat_and_gap_positions:
    input: repeats="wmsk.merged", gaps="gaps.tab", sizes="bac.out"
    output: "norptgap.tab"
    params: sge_opts=""
    shell: "sort -k 1,1 -k 2,2n {input.repeats} {input.gaps} | bedtools merge -i stdin -d 1 | bedtools complement -i stdin -g {input.sizes} > {output}"

rule annotate_gaps_for_all_clones:
    input: config["clone_ids"], "gaps_by_accession.tab"
    output: "gaps_for_all_accessions.tab"
    params: sge_opts=""
    shell: """join -j 1 -a 1 -e 0 -o 1.1 2.2 2.3 -t"	" {input} | cut -f 2-3 | awk 'OFS="\\t" {{ if (NR == 1) {{ print "gaps","gap_bases" }} print }}' > {output}"""

rule get_gaps_in_clones:
    input: "gaps.tab"
    output: "gaps_by_accession.tab"
    params: sge_opts=""
    shell: """sed '/_rc/d' {input} | sort -k 1,1 | awk 'OFS="\\t" {{ print $0,$3-$2 }}' | groupBy -i stdin -g 1 -c 4,4 -o count,sum > {output}"""

rule merge_gaps:
    input: expand("gaps/{accession}.bed", accession=ACCESSIONS)
    output: "gaps.tab"
    params: sge_opts=""
    shell: "sort -k 1,1 -k 2,2n {input} > {output}"

rule merge_sequence_indices:
    input: expand("fasta_index/{accession}.fai", accession=ACCESSIONS)
    output: "bac.out"
    params: sge_opts=""
    shell: "sort -k 1,1 {input} > {output}"

rule mask_all_sequences:
    input: expand("mask/{accession}.all_masked.fasta", accession=ACCESSIONS)
    output: "all_masked"
    params: sge_opts=""
    shell: "mkdir -p {output}; rsync {input} {output}/; rename '.all_masked.fasta' '' {output}/*.fasta"

rule merge_repeatmask_and_windowmask_beds:
    input: "rmsk.merged", "wmsk_only.merged"
    output: "wmsk.merged"
    params: sge_opts=""
    shell: "sort -k 1,1 -k 2,2n {input} | bedtools merge -i stdin -d 1 > {output}"

rule merge_windowmask_beds:
    input: expand("mask/{accession}.windowmasker_intervals.bed", accession=ACCESSIONS)
    output: "wmsk_only.merged"
    params: sge_opts=""
    shell: "sort -k 1,1 -k 2,2n {input} > {output}"

rule merge_repeatmask_beds:
    input: "rmsk.combined.bed"
    output: "rmsk.merged"
    params: sge_opts=""
    shell: "bedtools merge -i {input} -d 1 > {output}"

rule combine_repeatmask_beds:
    input: expand("mask/{accession}.out.bed", accession=ACCESSIONS)
    output: "rmsk.combined.bed"
    params: sge_opts=""
    shell: "sort -k 1,1 -k 2,2n -m {input} > {output}"

rule mask_sequence:
    input: fasta="mask/{accession}.masked", bed="mask/{accession}.windowmasker_intervals.bed"
    output: "mask/{accession}.all_masked.fasta"
    params: sge_opts=""
    shell: "bedtools maskfasta -fi {input.fasta} -bed {input.bed} -fo {output} -soft"

rule windowmask_intervals_to_bed:
    input: "mask/{accession}.windowmasker_intervals.txt"
    output: "mask/{accession}.windowmasker_intervals.bed"
    params: sge_opts=""
    shell: """sed 1d {input} | awk 'OFS="\\t" {{ print "{wildcards.accession}",$1,$3 }}' > {output}"""

rule windowmask_intervals:
    input: counts="mask/{accession}.windowmasker_counts.txt", sequence="mask/{accession}.trf.mask"
    output: "mask/{accession}.windowmasker_intervals.txt"
    params: sge_opts=""
    shell: "~jlhudd/pipelines/repeatmask/windowmasker -ustat {input.counts} -in {input.sequence} -out {output} -outfmt interval -dust true"

rule windowmask_counts:
    input: "mask/{accession}.trf.mask"
    output: "mask/{accession}.windowmasker_counts.txt"
    params: sge_opts=""
    shell: "~jlhudd/pipelines/repeatmask/windowmasker -mk_counts -fa_list false -in {input} -checkdup true -out {output}"

rule tandem_repeat_finder:
    input: "mask/{accession}.masked"
    output: "mask/{accession}.trf.mask"
    params: sge_opts=""
    shell: "cd `dirname {input}`; trf ../{input} {TRF_PARAMS} -m || true; mv ../{input}.{TRF_PARAMS_OUTPUT}.mask ../{output}; rm -f ../`dirname {output}`/{wildcards.accession}*.html"

rule convert_repeatmasker_gff_to_bed:
    input: "mask/{accession}.out.gff"
    output: "mask/{accession}.out.bed",
    params: sge_opts=""
    shell: """sed '/^#/d' {input} | awk 'OFS="\\t" {{ score=1000 - ($6 * 10); print $1,$4 - 1,$5,$10,score,$7 }}' | sed 's/"//g;s/Motif://' | sort -k 1,1 -k 2,2n > {output}"""

rule repeatmask_sequences:
    input: "rawFA/{accession,\d+.\d}"
    output: "mask/{accession}.masked", "mask/{accession}.out.gff"
    params: sge_opts="-l mfree=2G"
    run:
        shell("""RepeatMasker -gff -no_is -xsmall -s -e wublast -species "{SPECIES}" -dir `dirname {output[0]}` {input}; rm -f `dirname {output[0]}`/{wildcards.accession}.{{cat,out,ref,tbl}}""")
        if not all([os.path.exists(out) for out in output]):
            shell("rsync {input} {output[0]}; touch {output[1]}")

rule find_gaps:
    input: "rawFA/{accession}"
    output: "gaps/{accession}.bed"
    params: sge_opts=""
    shell: "python ~jlhudd/fasta_tools/find_gaps.py {input} | bedtools merge -i stdin -d 1 > {output}"

rule index_sequences:
    input: "rawFA/{accession}"
    output: "fasta_index/{accession}.fai"
    params: sge_opts=""
    shell: "mkdir -p `dirname {output}`; samtools faidx {input}; mv {input}.fai {output}"

rule download_sequences:
    output: "rawFA/{accession}"
    params: sge_opts=""
    run:
        if "clone_paths" in config:
            # Local paths to clone ids are provide in a tab-delimited file.
            clone_path = CLONE_PATHS_BY_ID[wildcards.accession]
            shell("rsync {clone_path} rawFA/{wildcards.accession}")
        else:
            # Clone ids are provided as accessions that can be downloaded from GenBank.
            shell("""wget "http://www.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&id={wildcards.accession}&complexity=1&rettype=fasta" -O {output}; sed -i '/^>/s/^>.\+/>{wildcards.accession}/' {output}""")
