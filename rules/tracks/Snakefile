TRACKS = ("gaps", "repeats", "segmental_duplications", "genes", "wssd", "tandem_repeats", "wssd_depth")

rule genomes:
    input: trackdb="tracks/trackDb.txt", sequence="tracks/clones.2bit", contigs="bac.out", groups="tracks/groups.txt"
    output: "tracks/genomes.txt"
    params: sge_opts="", common_species_name=config["common_species_name"], full_species_name=config["full_species_name"]
    shell: """echo "genome {params.common_species_name}
trackDb {input.trackdb}
twoBitPath {input.sequence}
groups {input.groups}
description BACs for {params.common_species_name}
organism {params.common_species_name}
defaultPos `head -n 1 {input.contigs} | awk 'OFS="\\t" {{ print $1":1-"$2 }}'`
orderKey 4800
scientificName {params.full_species_name}
" | sed 's/tracks\///' > {output}
"""

rule groups:
    output: "tracks/groups.txt"
    params: sge_opts=""
    shell: """echo "name map
label Mapping and Sequencing
priority 1
defaultIsClosed 0

name varRep
label Variation and Repeats
priority 1000
defaultIsClosed 0

name duplications
label Duplications
priority 2
defaultIsClosed 0

name genes
label Genes and Gene Predictions
priority 3
defaultIsClosed 0
" > {output}
"""

rule copy_twobit:
    input: "clones.2bit"
    output: "tracks/clones.2bit"
    params: sge_opts=""
    shell: "rsync {input} {output}"

rule trackdefs:
    input: expand("tracks/{track}.trackDb.txt", track=TRACKS)
    output: "tracks/trackDb.txt"
    params: sge_opts=""
    shell: "sed 's/tracks\///' {input} > {output}"

rule tandem_repeats_trackdef:
    input: "tracks/tandem_repeats.bb"
    output: "tracks/tandem_repeats.trackDb.txt"
    params: sge_opts=""
    shell: """echo "track tandem_repeats
shortLabel Tandem repeats
longLabel Tandem repeats
type bigBed 3
bigDataUrl {input}
group varRep
visibility dense
" > {output}
"""

rule tandem_repeats_bigbed:
    input: "tandem_repeats.bed", "bac.out"
    output: "tracks/tandem_repeats.bb"
    params: sge_opts=""
    shell: "bedToBigBed {input} {output}"

rule wssd_read_depth_trackdef:
    input: "tracks/wssd_depth.bw"
    output: "tracks/wssd_depth.trackDb.txt"
    params: sge_opts="", threshold=str(config["wssd_threshold_5kb"] / 5), max_view_limit=str(int((config["wssd_threshold_5kb"] / 5) * 2))
    shell: """echo "track wssd_depth
shortLabel Read depth (1 Kb windows)
longLabel WSSD read depth (1 Kb windows)
type bigWig
bigDataUrl {input}
group duplications
autoScale off
maxHeightPixels 100:50:25
viewLimits 0:{params.max_view_limit}
yLineOnOff on
yLineMark {params.threshold}
visibility full
" > {output}
"""

rule wssd_read_depth:
    input: "wins/wssd_depth_in_windows.bedGraph", "bac.out"
    output: "tracks/wssd_depth.bw"
    params: sge_opts=""
    shell: "bedGraphToBigWig {input} {output}"

rule wssd_duplications_trackdef:
    input: "tracks/wssd.bb"
    output: "tracks/wssd.trackDb.txt"
    params: sge_opts=""
    shell: """echo "track wssd
shortLabel WSSD
longLabel WSSD
type bigBed 3
bigDataUrl {input}
group duplications
visibility dense
" > {output}
"""

rule wssd_duplications:
    input: "wins/wssdGE10K_nogap.tab", "bac.out"
    output: "tracks/wssd.bb"
    params: sge_opts=""
    shell: "bedToBigBed {input} {output}"

rule segmental_duplications_trackdef:
    input: "tracks/segmental_duplications.bb"
    output: "tracks/segmental_duplications.trackDb.txt"
    params: sge_opts=""
    shell: """echo "track wgac
shortLabel Segmental duplications
longLabel Segmental duplications
type bigBed 9
bigDataUrl {input}
itemRgb on
group duplications
visibility squish
" > {output}
"""

rule segmental_duplications:
    input: "segmental_duplications_in_bacs.bed", "bac.out"
    output: "tracks/segmental_duplications.bb"
    params: sge_opts=""
    shell: "bedToBigBed {input} {output}"

rule genes_trackdef:
    input: "tracks/genes.bb"
    output: "tracks/genes.trackDb.txt"
    params: sge_opts=""
    shell: """echo "track genes
shortLabel Genes
longLabel Genes
type bigBed 12
bigDataUrl {input}
group genes
visibility pack
" > {output}
"""

rule genes:
    input: "mRNA.named.bed", "bac.out"
    output: "tracks/genes.bb"
    params: sge_opts=""
    shell: "bedToBigBed {input} {output}"

rule repeats_trackdef:
    input: "tracks/repeats.bb"
    output: "tracks/repeats.trackDb.txt"
    params: sge_opts=""
    shell: """echo "track repeats
shortLabel Repeats
longLabel Repeats
type bigBed 6
bigDataUrl {input}
spectrum on
scoreMax 1000
scoreMin 0
group varRep
visibility dense
" > {output}
"""

rule repeats_bigbed:
    input: "rmsk.combined.bed", "bac.out"
    output: "tracks/repeats.bb"
    params: sge_opts=""
    shell: "bedToBigBed {input} {output}"

rule gaps_trackdef:
    input: "tracks/gaps.bb"
    output: "tracks/gaps.trackDb.txt"
    params: sge_opts=""
    shell: """echo "track gaps
shortLabel Gaps
longLabel Gaps
type bigBed 3
bigDataUrl {input}
group map
visibility dense
" > {output}
"""

rule gaps_bigbed:
    input: "gaps.tab", "bac.out"
    output: "tracks/gaps.bb"
    params: sge_opts=""
    shell: "bedToBigBed {input} {output}"
