configfile: "../config.json"

SPECIES_NAME = config["common_species_name"]
BLAST_DB = config["wssd_blast_database"]
WSSD_THRESHOLD_5KB = config["wssd_threshold_5kb"]
WSSD_THRESHOLD_1KB = WSSD_THRESHOLD_5KB / 5

with open(config["clone_ids"], "r") as clone_ids_fh:
    ACCESSIONS = [line.rstrip() for line in clone_ids_fh]

TOTAL_ACCESSIONS = len(ACCESSIONS)

subworkflow sequences:
    workdir: "../sequences"

rule all:
    input: "wins/wssdGE10K_nogap.tab", "gaps_for_all_accessions.tab", "wssd_for_all_accessions.tab", "species.align", "showseq.out", "graph1.tab"

rule parasight_graph:
    input: "wins/5-1_norpt_iden.tab"
    output: "graph1.tab"
    shell: "graph_maker.pl {input} {output} 5000 5 0"

rule parasight_sequences:
    input: "bac.out"
    output: "showseq.out"
    shell: """echo -e "seqname\\tlength" > {output}; sort {input} >> {output}"""

rule parasight_alignment:
    input: "wins/5-1_norpt_iden.tab", "bac.out"
    output: "species.align"
    shell: "perl ~ginger2/bin/align_maker.pl {input} {output}"

rule wssd_for_all_accessions:
    input: config["clone_ids"], "wssd_bases_by_accession.tab"
    output: "wssd_for_all_accessions.tab"
    shell: """join -j 1 -a 1 -e 0 -o 1.1 2.2 -t"	" {input} > {output}"""

rule wssd_bases_by_accession:
    input: "wins/wssdGE10K_nogap.tab"
    output: "wssd_bases_by_accession.tab"
    shell: """sed '/_rc/d' {input} | awk 'OFS="\\t" {{ print $1,$3-$2 }}' | groupBy -i stdin -g 1 -c 2 -o sum > {output}"""

rule call_wssd:
    input: "wins/5-1_norpt_iden.tab"
    output: "wins/wssdGE10K_nogap.tab"
    shell: "~jlhudd/wssd/wssdCall_2.sh 0 {BLAST_DB} {WSSD_THRESHOLD_5KB} {WSSD_THRESHOLD_1KB} 0"

rule calculate_depth_in_windows:
    input: "wins/rd.out"
    output: "wins/5-1_norpt_iden.tab", "wins/1-1_norpt_iden.tab"
    shell: "~jlhudd/wssd/wssdCall_2.sh 1 {BLAST_DB} 0 0 0"

rule calculate_read_depth:
    input: "post_mega", "norptgap.tab"
    output: "wins/rd.out"
    shell: "mkdir -p $(dirname {output}); mega_wincln_qual_parser.pl -d {input[0]} -s .bo.bo -c -i 94 -e -a 300 -r {input[1]} -m 200 -h 200 -p 0.4 -o {output} -q -t > /dev/null;"

rule annotate_gaps_for_all_clones:
    input: config["clone_ids"], "gaps_by_accession.tab"
    output: "gaps_for_all_accessions.tab"
    shell: """join -j 1 -a 1 -e 0 -o 1.1 2.2 2.3 -t"	" {input} > {output}"""

rule get_gaps_in_clones:
    input: "gaps.tab"
    output: "gaps_by_accession.tab"
    shell: """sed '/_rc/d' {input} | sort -k 1,1 | awk 'OFS="\\t" {{ print $0,$3-$2 }}' | groupBy -i stdin -g 1 -c 4,4 -o count,sum > {output}"""

rule build_clone_files:
    input: "post_mega"
    output: "norptgap.tab", "gaps.tab", "bac.out"
    shell: "~jlhudd/wssd/wssdCall_0.sh"

rule post_blast:
    input: "mega64_out"
    output: "post_mega"
    params: cores=str(TOTAL_ACCESSIONS + 1)
    shell: "mkdir -p {output}; qsub -N post_wssd_{SPECIES_NAME} -sync y -cwd -q all.q -l h_vmem=4G -pe orte 2-{params.cores} ~jlhudd/wssd/mega64.sh -p -s {SPECIES_NAME} -b /var/tmp/{SPECIES_NAME}_wssd -i `pwd`/{input} -o `pwd`/{output}"

rule blast:
    input: sequences("all_masked")
    output: "mega64_out"
    params: cores=str(TOTAL_ACCESSIONS + 1)
    shell: "mkdir -p {output}; qsub -N wssd_{SPECIES_NAME} -sync y -cwd -q all.q -l h_vmem=4G -pe orte 2-{params.cores} ~jlhudd/wssd/mega64.sh -s {SPECIES_NAME} -b /var/tmp/{SPECIES_NAME}_wssd -i {input} -o `pwd`/{output}"
