configfile: "../config.json"

subworkflow liftover:
    workdir: "../liftover"

rule all:
    input: "segmental_duplications_in_bacs.bed", "segmental_duplications_for_all_accessions.tab"
    params: sge_opts=""

rule annotate_segmental_duplications_for_all_clones:
    input: config["clone_ids"], "segmental_duplications_per_clone.tab"
    output: "segmental_duplications_for_all_accessions.tab"
    shell: """join -j 1 -a 1 -e 0 -o 1.1 2.2 -t"	" {input} > {output}"""

rule all_segmental_duplications_per_clone:
    input: "segmental_duplications_in_bacs.bed"
    output: "segmental_duplications_per_clone.tab"
    shell: """awk 'OFS="\\t" {{ print $1,$3-$2 }}' {input} | groupBy -i stdin -g 1 -c 2 -o sum > {output}"""

# Lift over WGAC from reference to BACs.
rule liftover_segmental_duplications:
    input: "segmental_duplications.bed", liftover("liftover.chain")
    output: "segmental_duplications_in_bacs.bed", "segmental_duplications_unmapped_to_bacs.txt"
    params: sge_opts=""
    shell: "liftOver -minMatch=0.75 {input} {output}"

rule summarize_segmental_duplications:
    input: config["segmental_duplications"]
    output: "segmental_duplications.bed"
    params: sge_opts=""
    shell: """awk 'OFS="\\t" {{ if($1 == $7) {{ type="intra" }} else {{ type="inter" }} if ($6 == "_") {{ strand="-" }} else {{ strand="+" }}; if ($26 > 0.99) {{ color="255,140,0" }} else if ($26 > 0.98 && $26 <= 0.99) {{ color="255,255,0" }} else {{ color="105,105,105" }} score=sprintf("%i", $26 * 1000); print $1,$2,$3,$4"_"type,score,strand,$2,$3,color }}' {input} | sort -k 1,1 -k 2,2n > {output}"""
